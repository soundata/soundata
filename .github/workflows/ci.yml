name: CI

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: True

jobs:
    test:
        name: "Python ${{ matrix.python-version }} on ${{ matrix.os }}"
        runs-on: ${{ matrix.os }}

        strategy:
          fail-fast: false
          matrix:
            include:
              - os: ubuntu-latest
                python-version: "3.9"
              - os: ubuntu-latest
                python-version: "3.10"
              - os: ubuntu-latest
                python-version: "3.11"
              - os: ubuntu-latest
                python-version: "3.12"
              - os: macos-latest
                python-version: "3.9"
              - os: macos-latest
                python-version: "3.10"
              - os: macos-latest
                python-version: "3.11"
              - os: macos-latest
                python-version: "3.12"
              - os: windows-latest
                python-version: "3.9"
              - os: windows-latest
                python-version: "3.10"
              - os: windows-latest
                python-version: "3.11"
              - os: windows-latest
                python-version: "3.12"

        steps:
          - uses: actions/checkout@v4
            with:
              submodules: true

          - name: Install OS dependencies
            shell: bash -l {0}
            run: |
              case "${{ runner.os }}" in
              Linux)
                sudo apt-get update -yy
                sudo apt-get install -yy wget libsndfile-dev libsox-fmt-mp3 ffmpeg zip libasound2-dev
                ;;
              macOS)
                brew install libsamplerate wget libsndfile sox ffmpeg zip
                ;;
              Windows)
                choco install wget ffmpeg zip
                ;;
              esac
          - name: Set up Python ${{ matrix.python-version }}
            uses: actions/setup-python@v5
            with:
              python-version: ${{ matrix.python-version }}

          - name: Install Poetry
            run: pip install poetry

          - name: Cache Poetry virtualenv
            uses: actions/cache@v4
            with:
              path: |
                ~/.cache/pypoetry/virtualenvs
                .venv
              key: ${{ runner.os }}-py${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
              restore-keys: |
                ${{ runner.os }}-py${{ matrix.python-version }}-poetry-
          - name: Install dependencies
            run: |
              poetry config virtualenvs.in-project true
              poetry install --with=tests,plots,docs
          - name: Run pytest
            shell: bash -l {0}
            run: poetry run pytest -n auto -vv --cov-report term-missing --cov-report=xml --cov=soundata tests

          - name: Upload coverage to Codecov
            uses: codecov/codecov-action@v4
            with:
              token: ${{ secrets.CODECOV_TOKEN }}
              files: ./coverage.xml
              directory: ./coverage/reports/
              flags: unittests
              env_vars: OS,PYTHON
              name: codecov-umbrella
              fail_ci_if_error: true
              verbose: true